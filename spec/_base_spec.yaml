# Gradual Function Type Checking for Lua 5.1, 5.2, 5.3 & 5.4
# Copyright (C) 2014-2020 Gary V. Vaughan

before:
  this_module   = 'typecheck._base'

  M = require(this_module)

specify typecheck._base:
- context when required:
  - it does not perturb the global namespace:
      expect(show_apis {added_to='_G', by=this_module}).
         to_equal {}


- describe getfenv:
  - before:
      f = M.getfenv

  - it returns a table:
      expect(type(f())).to_be 'table'
      expect(type(f(0))).to_be 'table'
      expect(type(f(f))).to_be 'table'

  - context when std._debug.argcheck is true:
    - before:
        fn = function(n) return getfenv(n), nil end
        fnenv = {getfenv = f}
        M.setfenv(fn, fnenv)
        gn = function(n) return fn(n), nil end
        gnenv = {fn = fn}
        M.setfenv(gn, gnenv)

    - it returns the environment of a function:
        expect(f(fn)).to_be(fnenv)
    - it returns the environment of a functor:
        ftor = setmetatable({}, {__call = fn})
        expect(f(ftor)).to_be(fnenv)
    - it returns the global environment:
        # FIXME: don't break out of the sandbox in Lua 5.1
        #  expect(f(0)).to_be(_G)
        expect(f(0) == f(0)._G).to_be(true)
    - it returns the callers environment:
        expect(fn(1)).to_be(fnenv)
        expect(gn(1)).to_be(fnenv)
    - it returns the callers environment by default:
        expect(fn()).to_be(fn(1))
    - it returns the environment of higher stack frames:
        expect(gn(2)).to_be(gnenv)

  - context when std._debug.argcheck is false:
    - before:
        preamble = [[
           require 'std._debug'.argcheck = false
           M = require 'typecheck._base'
           f = M.getfenv
           fn = function(n) return getfenv(n), nil end
           fnenv = {getfenv = f}
           M.setfenv(fn, fnenv)
           gn = function(n) return fn(n), nil end
           gnenv = {fn = fn}
           M.setfenv(gn, gnenv)
        ]]
    - it returns the environment of a function:
        expect(luaproc(preamble .. [[
          os.exit(f(fn) == fnenv and 0 or 1)
        ]])).to_succeed_with ''
    - it returns the environment of a functor:
        expect(luaproc(preamble .. [[
          ftor = setmetatable({}, {__call = fn})
          os.exit(f(ftor) == fnenv and 0 or 1)
        ]])).to_succeed_with ''
    - it returns the global environment:
        # FIXME: don't break out of the sandbox in Lua 5.1
        expect(luaproc(preamble .. [[
          os.exit(f(0) == f(0)._G and 0 or 1)
        ]])).to_succeed_with ''
    - it returns the callers environment:
        expect(luaproc(preamble .. [[
          os.exit(fn(1) == fnenv and 0 or 1)
        ]])).to_succeed_with ''
        expect(luaproc(preamble .. [[
          os.exit(gn(1) == fnenv and 0 or 1)
        ]])).to_succeed_with ''
    - it returns the callers environment by default:
        expect(luaproc(preamble .. [[
          os.exit(fn() == fn(1) and 0 or 1)
        ]])).to_succeed_with ''
    - it returns the environment of higher stack frames:
        expect(luaproc(preamble .. [[
          os.exit(gn(2) == gnenv and 0 or 1)
        ]])).to_succeed_with ''


- describe getmetamethod:
  - before:
      f = M.getmetamethod

  - context with a table:
    - before:
        fn = function() return 'uh-oh' end
        method = function() return 'called' end
        functor = setmetatable({}, {__call = method})
        t = setmetatable(
           {field = 0, fn = fn, morefn = fn},
           {field = 1, fn = functor, method = method}
        )
    - it returns nil for missing metamethods:
        expect(f(t, 'morefn')).to_be(nil)
    - it returns nil for non-callable metatable entries:
        expect(f(t, 'field')).to_be(nil)
    - it returns a function metamethod:
        expect(f(t, 'method')).to_be(method)
        expect(f(t, 'method')()).to_be 'called'
    - it returns a functor metamethod:
        expect(f(t, 'fn')).to_be(functor)
        expect(f(t, 'fn')()).to_be 'called'


- describe len:
  - before:
      __len = function() return 42 end
      __tostring = function() return 'string' end

      f = M.len

  - it works for an empty list:
      src = {}
      expect(f(src)).to_be(#src)
  - it works for an empty string:
      src = ''
      expect(f(src)).to_be(#src)
  - it counts embedded zeros in strings:
      expect(f 'ab\0c\0').to_be(5)
  - it respects __len metamethod:
      expect(f(setmetatable({}, {__len = __len}))).to_be(42)
  - it respects __tostring metamethod:
      expect(f(setmetatable({}, {__tostring = __tostring}))).to_be(6)
  - it counts embedded zeros in __string results:
      src = setmetatable({}, {__tostring = function() return 'ab\0c\0' end})
      expect(f(src)).to_be(5)
  - it prioritizes __len over __tostring:
      x = setmetatable({}, { __len = __len, __tostring = __tostring})
      expect(f(x)).to_be(42)
  - it does not count nil valued array part elements:
      expect(f {1, 2, 3, nil, nil, 6}).to_be(3)
  - 'it defers to the # operator':
      expect(f 'abc').to_be(3)


- describe pack:
  - before:
      f = M.pack

  - it returns a table:
      expect(type(f())).to_be 'table'
  - it sets the 'n' field:
      expect(f().n).not_to_be(nil)
      expect(f(1, 2, 3).n).to_be(3)
  - it packs arguments into the returned table:
      expect(f(1, 2, 3)).to_equal {1, 2, 3; n=3}
  - it packs nil arguments correctly:
      expect(f(nil, 2, nil, nil)).to_equal {[2]=2; n=4}
  - it responds to len:
      expect(M.len(f())).to_be(0)
      expect(M.len(f(nil))).to_be(1)
      expect(M.len(f(1, 2, 3))).to_be(3)
      expect(M.len(f(nil, 2, nil, nil))).to_be(4)


- describe rawlen:
  - before:
      __len = function() return 42 end
      __tostring = function() return 'string' end

      f = M.rawlen

  - it works for an empty list:
      src = {}
      expect(f(src)).to_be(0)
  - it works for an empty string:
      src = ''
      expect(f(src)).to_be(0)
  - it counts embedded zeros in strings:
      expect(f 'ab\0c\0').to_be(5)
  - it ignores __len metamethod:
      expect(f(setmetatable({}, {__len = __len}))).to_be(0)
  - it ignores __tostring metamethod:
      expect(f(setmetatable({}, {__tostring = __tostring}))).to_be(0)
  - it even ignores __len and __tostring together:
      x = setmetatable({}, { __len = __len, __tostring = __tostring})
      expect(f(x)).to_be(0)
  - it does not count nil valued array part elements:
      expect(f {1, 2, 3, nil, nil, 6}).to_be(3)
  - 'it defers to the # operator':
      expect(f 'abc').to_be(3)


- describe setfenv:
  - before:
      f = M.setfenv

  - it returns nothing after setting the global environment:
      expect(luaproc [[
         setfenv = require 'typecheck._base'.setfenv
         print(tostring(setfenv(0, _G)))
      ]]).to_succeed_with 'nil\n'
  - it returns the actioned function otherwise:
      fn = function(env) return f(1, env), nil end
      expect(fn {}).to_be(fn)
      expect(f(fn, {})).to_be(fn)

  - context when std._debug.argcheck is true:
    - before:
        fn = function(env) return f(1, env), nil end
        fnenv = {f = f}

    - it sets the environment of a function:
        r = f(fn, fnenv)
        expect(fn {}).to_be(r)
    - it sets the environment of a functor:
        ftor = setmetatable({}, {__call = fn})
        r = f(ftor, fnenv)
        expect(ftor {}).to_be(r)
    - it sets the global environment: |
        pending 'what is this supposed to do, anyway?'
        expect(luaproc [[
           local os, print, setfenv = os, print, require 'typecheck._base'.setfenv
           _G.x = 'ohnoes'
           setfenv(0, {x = 'woo!'})
           print(_G.x)
           os.exit(_G.x == 'woo!' and 0 or 1)
        ]]).to_succeed_with 'woo!\n'
    - it sets the callers environment:
        fn = function(n, env) return f(n, env), nil end
        expect(fn(1, fnenv)).to_be(fn)
        gn = function(n, env) return fn(n, env), nil end
        expect(gn(1, fnenv)).to_be(fn)
        expect(gn(2, {fn = fn})).to_be(gn)

  - context when std._debug.argcheck is false:
    - before:
        preamble = [[
           require 'std._debug'.argcheck = false
           M = require 'typecheck._base'
           f = M.setfenv
           fn = function(env) return f(1, env), nil end
           fnenv = {f = f}
        ]]

    - it sets the environment of a function:
        expect(luaproc(preamble .. [[
           r = f(fn, fnenv)
           os.exit(fn {} == r and 0 or 1)
        ]])).to_succeed_with ''
    - it sets the environment of a functor:
        expect(luaproc(preamble .. [[
           ftor = setmetatable({}, {__call = fn})
           r = f(ftor, fnenv)
           os.exit(ftor {} == r and 0 or 1)
        ]])).to_succeed_with ''
    - it sets the global environment: |
        pending 'what is this supposed to do, anyway?'
        expect(luaproc [[
           local os, print, setfenv = os, print, require 'typecheck._base'.setfenv
           _G.x = 'ohnoes'
           setfenv(0, {x='woo!'})
           print(_G.x)
           os.exit(_G.x == 'woo!' and 0 or 1)
        ]]).to_succeed_with 'woo!\n'
    - it sets the callers environment:
        expect(luaproc(preamble .. [[
           fn = function(n, env) return f(n, env), nil end
           os.exit(fn(1, fnenv) == fn and 0 or 1)
        ]])).to_succeed_with ''
        expect(luaproc(preamble .. [[
           fn = function(n, env) return f(n, env), nil end
           gn = function(n, env) return fn(n, env), nil end
           print(gn(1, fnenv) == fn)
           os.exit(gn(2, {fn = fn}) == gn and 0 or 1)
        ]])).to_succeed_with 'true\n'


- describe tointeger:
  - before:
      f = M.tointeger

  - it returns any integer argument:
      expect(f(99)).to_be(99)
  - it converts integer-like floats:
      expect(f(1.0)).to_be(1)
  - it returns `nil` for integer-like strings:
      expect(f '2').to_be(nil)
  - it returns `nil` for non-integer convertible values:
      expect(f(false)).to_be(nil)
      expect(f(1.5)).to_be(nil)
      expect(f '1.5').to_be(nil)


- describe unpack:
  - before:
      q = setmetatable({1, 2, 5}, {__len = function() return 5 end})
      t = {1, 2, 5}
      u = {1, 2, 5; n=3}
      f = function(...) return M.pack(M.unpack(...)) end

  - it works with an empty sequence:
      expect(f {}).to_equal {n=0}
  - it returns all elements of a sequence:
      expect(f(t)).to_equal(u)
  - it stops before the first `nil` valued element:
      expect(f {1, 2, 5, nil}).to_equal(u)
      expect(f {1, 2, 5, nil, 3}).to_equal(u)
      expect(f {nil, 1, nil, 2}).to_equal {n=0}
  - it ignores non-sequence elements:
      expect(f {1, 2, 5; n=2}).to_equal(u)
      expect(f {1, foo='bar', 2, baz={4}, 5}).to_equal(u)
  - it respects optional `from_index` argument:
      expect(f(t, 1)).to_equal(u)
      expect(f(t, 2)).to_equal {2, 5; n=2}
      expect(f(t, 3)).to_equal {5; n=1}
      expect(f(t, 4)).to_equal {n=0}
      expect(f(t, 42)).to_equal {n=0}
  - it stops before first `nil` even if `from_index` is larger:
      expect(f({[42]=1}, 42)).to_equal {n=0}
  - it returns initial `nils` when `from_index` is smaller than 1:
      expect(f(t, 0)).to_equal {nil, 1, 2, 5; n=4}
      expect(f(t, -1)).to_equal {nil, nil, 1, 2, 5; n=5}
  - it respects `__len` metamethod:
      expect(f(q)).to_equal {1, 2, 5; n=5}
  - it respects optional `to_index` argument:
      expect(f(t, nil, 3)).to_equal(u)
      expect(f(t, nil, 2)).to_equal {1, 2; n=2}
      expect(f(t, nil, 1)).to_equal {1; n=1}
      expect(f(t, nil, 0)).to_equal {n=0}
  - it respects optional `to_index` argument over `__len` metamethod:
      expect(f(q, nil, 3)).to_equal(u)
      expect(f(q, nil, 2)).to_equal {1, 2; n=2}
      expect(f(q, nil, 1)).to_equal {1; n=1}
      expect(f(q, nil, 0)).to_equal {n=0}
  - it returns additional `nils` when `to_index` is greater than sequence length:
      expect(f(t, nil, 4)).to_equal {1, 2, 5; n=4}
      expect(f(t, nil, 42)).to_equal {1, 2, 5; n=42}
  - it accepts `from_index` and `to_index` together:
      expect(f(t, 1, 3)).to_equal(u)
      expect(f(t, 0, 4)).to_equal {nil, 1, 2, 5; n=5}
      expect(f(t, 0, 2)).to_equal {nil, 1, 2; n=3}
      expect(f(t, 1, 2)).to_equal {1, 2; n=2}
      expect(f(t, 2, 3)).to_equal {2, 5; n=2}
      expect(f(t, 2, 4)).to_equal {2, 5; n=3}
  - it returns nothing if `from_index` is larger than `to_index`:
      expect(f(t, 3, 1)).to_equal {n=0}
      expect(f(t, 1, -1)).to_equal {n=0}
      expect(f(t, -1, -2)).to_equal {n=0}
  - it returns `nils` if `from_index` and `to_index` are out-of-bounds:
      expect(f(t, -1, -1)).to_equal {n=1}
      expect(f(t, -2, -1)).to_equal {n=2}
      expect(f(t, 100, 199)).to_equal {n=100}
  - it is the inverse operation to `pack`:
      expect(M.pack(M.unpack(M.pack(1, nil, 3, nil)))).
         to_equal {1, nil, 3; n=4}
